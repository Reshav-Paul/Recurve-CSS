@use 'column';
@use 'row_column';
@use 'offset';
@use 'gutter';
@use 'alignment';
@use 'flex';
@use 'order';
@use 'spacing';
@use 'display';
@import '../constants';

.row {
    --rcss-gutter-x: #{$grid-gutter-width};
    --rcss-gutter-y: 0px;
    display: flex;
    flex: 1 0 100%;
    flex-wrap: wrap;
    margin-top: calc(var(--rcss-gutter-y) * -1);
    margin-left: calc(var(--rcss-gutter-x) / -2);
    margin-right: calc(var(--rcss-gutter-x) / -2);
}

.row > * {
    box-sizing: border-box;
    flex-shrink: 0;
    width: 100%;
    max-width: 100%;    
    padding-left: calc(var(--rcss-gutter-x) / 2);
    padding-right: calc(var(--rcss-gutter-x) / 2);
    margin-top: var(--rcss-gutter-y);
}

/* for xl screens */
@include column.column-default;
@include row_column.row-column-default;
@include offset.offset-default;
@include gutter.gutter-default;


/* for lg, md, sm, xs screens */
@each $breakpoint-name, $breakpoint-value in $breakpoints {
    @media (max-width: $breakpoint-value) {
        @include row_column.row-column-breakpoint($breakpoint-name);
        @include column.column-breakpoint($breakpoint-name);
        @include offset.offset-breakpoint($breakpoint-name);
        @include gutter.gutter-breakpoint($breakpoint-name);
    }    
}

// no gutters
.no-gutter {
    margin-left: 0;
    margin-right: 0;

    > .col,
    > [class*='col-']
    {
        padding-left: 0;
        padding-right: 0;
    }
}

@include display.display-breakpoint('');
@include flex.flex-breakpoint('');
@include alignment.alignments('');
@include order.order-default;
@include spacing.spacing-breakpoint('');


@each $breakpoint-name, $breakpoint-value in $breakpoints {
    @media (max-width: $breakpoint-value) {
        @include display.display-breakpoint($breakpoint-name);
        @include flex.flex-breakpoint($breakpoint-name);
        @include alignment.alignments($breakpoint-name);
        @include order.order-breakpoint($breakpoint-name);
        @include spacing.spacing-breakpoint($breakpoint-name);        
    }
}